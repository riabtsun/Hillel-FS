const originalString = 'Привіт, світ. Світ такий великий.';
const newString = originalString.match(/.іт/gi);

const cyrillicLetters = text.match(/[а-яА-ЯіІїЇєЄґҐ]/g);

// \g Модифікатор g (глобальний пошук) в регулярних виразах використовується для пошуку всіх відповідностей у рядку, а не лише першої.
// \i Модифікатор i (ігнорування регістру) дозволяє здійснювати пошук без врахування регістру букв, тобто великих чи малих.
// \. Модифікатор dot (точка) в регулярних виразах замінює будь-який символ, крім нових рядків.
// Припустимо, ми хочемо знайти перше входження будь-якого символу, за яким слідують літери "bc" в рядку "abc123".
// const text = "abc123";
// const match = text.match(/.bc/);
// У цьому прикладі регулярний вираз /.bc/ шукає будь-який символ, за яким безпосередньо слідують літери "bc".
// За допомогою цього виразу ми знаходимо відповідність "abc", де "a" є "будь-яким символом", що передує "bc".
// Оператори повторення символів у регулярних виразах дозволяють вказати, скільки разів символ або група символів може з'являтися в зіставленому рядку.*

// * (зірочка) відповідає 0 або більше випадкам попереднього елемента.
// + (плюс) відповідає 1 або більше випадкам попереднього елемента.
// ? (запитальний знак) робить попередній елемент необов'язковим, відповідаючи 0 або 1 випадку.
// (()) Групувальні дужки в регулярних виразах (()) використовуються для створення підвиразів усередині регулярного виразу.
let text = 'коло, Кілометр, кіло';
const replacedText = text.replace(/(коло|кіло)/gi, 'круг');
// Оператор | всередині дужок означає "або"

// Екранування спецсимволів у регулярних виразах полягає у використанні символа зворотного слеша \\
const dots = text.match(/\./g); // Використовуємо екранування для пошуку точок

// {} Фігурні дужки в регулярних виразах використовуються як квантифікатори, що дозволяють точно вказати кількість входжень символу або групи символів, які повинні бути знайдені в рядку для відповідності шаблону.
// {n} вказує, що попередній символ або група повинні зустрічатися рівно n разів.
// {n,m} вказує, що попередній символ або група повинні зустрічатися від n до m разів включно.
// {n,} вказує, що попередній символ або група повинні зустрічатися n або більше разів.

// Групи символів у регулярних виразах дозволяють визначати широкі категорії символів за допомогою коротких позначень:
// \\s відповідає будь-якому пробільному символу (включає пробіл, табуляцію, переведення рядка тощо).
// \\S відповідає будь-якому символу, крім пробільних.
// \\w відповідає будь-якому словесному символу (включає літери, цифри та підкреслення).
// \\W відповідає будь-якому символу, що не є словесним символом.
// \\d відповідає будь-якій цифрі.
// \\D відповідає будь-якому символу, що не є цифрою.

text = 'Привіт 123! ABC_def. \t\n';

// Знайти пробільні символи
const whitespaces = text.match(/\s/g);

// Знайти не-пробільні символи
const nonWhitespaces = text.match(/\S/g);

// Знайти словесні символи
const wordCharacters = text.match(/\w/g);

// Знайти не-словесні символи
const nonWordCharacters = text.match(/\W/g);

// Знайти цифри
const digits = text.match(/\d/g);

// Знайти не-цифрові символи
const nonDigits = text.match(/\D/g);

// Квадратні дужки [] у регулярних виразах використовуються для створення
// символьних класів, які відповідають будь-якому одному символу з вказаних
// всередині дужок. Це дозволяє вказати набір символів, які можуть зустрічатися
// на даній позиції в шаблоні, що шукається.

// ^ У регулярних виразах символ ^ використовується для вказівки на початок рядка,
// $ а символ $ - для вказівки на кінець рядка. Ці символи дозволяють точно
// визначити, де має починатися або закінчуватися шаблон відповідності у тексті.
// Перевірка на початок рядка
const startsWithHello = /^Привіт/.test(text);
// Перевірка на кінець рядка
const endsWithWorld = /світ!$/.test(text);

// Приклад коду, перевірка формату електронної пошти:
const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
const email = 'example@mail.com';

const isValidEmail = emailPattern.test(email);

console.log(`Чи валідний email "${email}": ${isValidEmail}`);
// У цьому прикладі регулярний вираз визначає шаблон для перевірки формату електронної адреси:

// ^[a-zA-Z0-9._-]+ вказує на початок рядка і один або більше символів, що можуть включати літери (великі та малі), цифри, точки, підкреслення та дефіси.
// @[a-zA-Z0-9.-]+ вимагає наявності символа @, за яким слідує один або більше символів, що можуть включати літери, цифри, точки та дефіси.
// \\.[a-zA-Z]{2,6}$ вимагає наявності точки, за якою слідує від 2 до 6 літер, що індикують домен верхнього рівня. Символ $ вказує на кінець рядка.

// Метод match, який використовується в рядках JavaScript, застосовує регулярний вираз до рядка і повертає масив
// усіх знайдених відповідностей. Коли використовується з модифікатором g (глобальний пошук), метод повертає масив
// усіх відповідностей в рядку. Без модифікатора g, match повертає масив, що містить першу відповідність та додаткову
// інформацію про неї, наприклад, позицію збігу та групи захоплення.
